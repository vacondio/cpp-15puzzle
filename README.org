* 15puzzle

Pet project to pick up C++ after some years of not using it.  Compile with ~g++~
on GNU/Linux with

#+BEGIN_SRC bash
make
#+END_SRC

Clean the source tree with

#+BEGIN_SRC bash
make clean
#+END_SRC

More will come.

** To-do list
*** DONE wrap random number generation in a class
*** TODO allow for initialization choice via command line arguments
*** TODO add movement methods to Puzzle class

** Remarks

There are currently two random generation algorithms for the initial puzzle:
~randomOrder~ and ~randomOrderDumb~.

~randomOrder~ makes use of a very straightforward method based on ~std::vector~;
whereas ~randomOrderDumb~ is based on ~std::array~, avoiding dynamic memory
allocation.  In both cases a random number i is generated to extract the integer
in the i-th position inside the ~{1, ..., 16}~ array.  While ~randomOrder~ just
removes the extracted number from the array, ~randomOrderDumb~ has to make sure
at every extraction that previously extracted numbers are not re-extracted,
since its array cannot be resized.  The latter algorithm scales horribly,
becoming way more expensive than the former for larger puzzles.

Now that I think about it, starting from another fixed ~{1, ..., 16}~ array and
setting the extracted numbers to zero could make the algorithm faster. I should
try this and see whether it is still way worse than the std::vector-based one.

*** QUICK NOTE
The new algorithm was just added and is the new randomOrderDumb, and looks much
faster. Old dumb algorithm is now randomOrderDumber.
